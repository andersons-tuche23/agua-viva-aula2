{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport Axios from \"axios\";\nexport default function Form({\n  titulo,\n  culto,\n  orderListagem,\n  remocao,\n  chegada,\n  setControle,\n  controle\n}) {\n  const {\n    0: soma,\n    1: setSoma\n  } = useState();\n\n  const doRemove = (id, data) => {\n    remove(`https://aguaviva-rp.firebaseio.com/teste/${id}.json`, data);\n  };\n\n  const remove = (url, data) => {\n    Axios.delete(url).then(() => {\n      alert(`você removeu ${data.nome} da listagem`);\n      window.location = \"/remocao.html\";\n    });\n  };\n\n  const doEdit = (id, data) => {\n    setControle(!controle);\n\n    if (data.chegada) {\n      edit(`https://aguaviva-rp.firebaseio.com/teste/${id}.json`, _objectSpread({}, data, {\n        chegada: false\n      }));\n    } else {\n      edit(`https://aguaviva-rp.firebaseio.com/teste/${id}.json`, _objectSpread({}, data, {\n        chegada: true\n      }));\n    }\n  };\n\n  const edit = (url, data) => {\n    Axios.put(url, data).then(() => {// if (data.chegada) {\n      //   alert(`${data.nome} confirmou a presença no culto`);\n      // } else {\n      //   alert(`você tirou a confirmação de ${data.nome} do culto`);\n      // }\n      // window.location = \"/controle.html\";\n    });\n  }; // useEffect(() => {\n  //   let fetchListagem;\n  //   setTimeout(function () {\n  //     const fetch = async () => {\n  //       fetchListagem = await fetchTeacherMentory();\n  //       setListMentory(fetchListagem);\n  //     };\n  //     fetch();\n  //   }, 1000);\n  // }, [mod]);\n\n\n  const contadorChegada = orderListagem === null || orderListagem === void 0 ? void 0 : orderListagem.filter(list => {\n    return list[1].chegada === true && list[1].culto == culto;\n  });\n  const contadorCriancas = orderListagem === null || orderListagem === void 0 ? void 0 : orderListagem.filter(list => {\n    return list[1].culto == culto;\n  });\n  useEffect(() => {\n    if (contadorCriancas) {\n      const soma1 = [...contadorCriancas];\n      const soma2 = soma1.map(som => {\n        return parseInt(som[1].criancas);\n      });\n      let total;\n\n      if (soma2.length >= 1) {\n        total = soma2.reduce((acumulado, x) => {\n          // console.log(`${acumulado}+${x} = ${acumulado + x}`);\n          return acumulado + x;\n        });\n      } else {\n        total = 0;\n      }\n\n      setSoma(total);\n    }\n  }, [contadorCriancas]);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"list-header\"\n  }, __jsx(\"h1\", null, titulo), (contadorChegada === null || contadorChegada === void 0 ? void 0 : contadorChegada.length) > 0 && chegada && __jsx(\"span\", null, __jsx(\"small\", {\n    className: \"contagem\"\n  }, contadorChegada === null || contadorChegada === void 0 ? void 0 : contadorChegada.length), (contadorChegada === null || contadorChegada === void 0 ? void 0 : contadorChegada.length) == 1 && __jsx(React.Fragment, null, \" pessoa chegou \"), (contadorChegada === null || contadorChegada === void 0 ? void 0 : contadorChegada.length) != 1 && __jsx(React.Fragment, null, \" pessoas chegaram \"), \"no culto\")), soma != 0 && !chegada && !remocao && __jsx(\"div\", {\n    className: \"list-criancas\"\n  }, __jsx(\"span\", null, __jsx(\"img\", {\n    src: \"images/bebe.svg\",\n    width: \"25\"\n  }), __jsx(\"small\", null, \" \", __jsx(\"b\", null, soma), \" \", soma == 1 ? \"criança estará presente\" : \"crianças estarão presentes\", \" \", \"para o cultinho\"))), __jsx(\"table\", null, __jsx(\"thead\", null, __jsx(\"tr\", null, __jsx(\"th\", null, \"Nome\"), __jsx(\"th\", null, \"Rede\"), !chegada && !remocao && __jsx(\"th\", null, \"Crian\\xE7as\"), chegada && __jsx(\"th\", null, \"Controle Servos\"), remocao && __jsx(\"th\", null, \"Status\"))), __jsx(\"tbody\", null, orderListagem && __jsx(React.Fragment, null, orderListagem.map(individuo => {\n    return __jsx(React.Fragment, null, individuo.map(ind => {\n      if (ind.culto == culto) {\n        return __jsx(\"tr\", {\n          key: ind\n        }, __jsx(\"td\", null, ind.nome, \" \", ind.sobrenome), __jsx(\"td\", null, \"Pr \", ind.rede), !chegada && !remocao && __jsx(\"td\", null, ind.criancas ? ind.criancas : \"0\"), chegada && __jsx(\"td\", {\n          onClick: e => doEdit(individuo[0], ind)\n        }, ind.chegada ? __jsx(\"img\", {\n          src: \"images/carraca.svg\",\n          className: \"certo\"\n        }) : __jsx(\"img\", {\n          src: \"images/carraca.svg\",\n          className: \"nao_certo\"\n        }) // <div className=\"nao_chegou\"></div>\n        ), remocao && __jsx(\"td\", null, __jsx(\"button\", {\n          className: \"remove\",\n          onClick: e => doRemove(individuo[0], ind)\n        }, \"Remover\")));\n      }\n    }));\n  })))));\n}","map":null,"metadata":{},"sourceType":"module"}