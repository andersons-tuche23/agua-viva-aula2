{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nexport var updateParameter = function updateParameter() {\n  var uri = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n  var key = arguments.length > 1 ? arguments[1] : undefined;\n  var value = arguments.length > 2 ? arguments[2] : undefined;\n  var hasQueries = uri.includes('?');\n  var hasHash = uri.includes('#');\n  var hash = '';\n\n  if (hasHash) {\n    hash = uri.substr(uri.indexOf('#'));\n    uri = uri.substr(0, uri.indexOf('#'));\n  }\n\n  var queries = '';\n\n  if (hasQueries) {\n    queries = uri.split('?');\n    queries = queries[1];\n    uri = uri.substr(0, uri.indexOf('?'));\n    var parsedQueries = queries.split('&');\n    var updatedQueries = [];\n    var hasCurrentQuery;\n    parsedQueries.forEach(function (parsedQuery) {\n      var _parsedQuery$split = parsedQuery.split('='),\n          _parsedQuery$split2 = _slicedToArray(_parsedQuery$split, 2),\n          parsedKey = _parsedQuery$split2[0],\n          parsedValue = _parsedQuery$split2[1];\n\n      if (parsedKey === key) {\n        if (value) {\n          hasCurrentQuery = true;\n          return updatedQueries.push(\"\".concat(key, \"=\").concat(value));\n        }\n\n        return;\n      }\n\n      if (parsedValue) {\n        updatedQueries.push(\"\".concat(parsedKey, \"=\").concat(parsedValue));\n      }\n    });\n\n    if (!hasCurrentQuery) {\n      if (value) {\n        updatedQueries.push(\"\".concat(key, \"=\").concat(value));\n      }\n    }\n\n    if (updatedQueries.length) {\n      queries = '?' + updatedQueries.join('&');\n    } else {\n      queries = '';\n    }\n  } else {\n    if (value) {\n      queries = \"?\".concat(key, \"=\").concat(value);\n    }\n  }\n\n  return uri + queries + hash;\n};\nexport var getParameter = function getParameter(uri, key) {\n  var _uri$split = uri.split('?'),\n      _uri$split2 = _slicedToArray(_uri$split, 2),\n      parametersAndHash = _uri$split2[1];\n\n  if (parametersAndHash) {\n    var _parametersAndHash$sp = parametersAndHash.split('#'),\n        _parametersAndHash$sp2 = _slicedToArray(_parametersAndHash$sp, 1),\n        parameters = _parametersAndHash$sp2[0];\n\n    var parametersObject = {};\n    parameters.split('&').forEach(function (parameter) {\n      var _parameter$split = parameter.split('='),\n          _parameter$split2 = _slicedToArray(_parameter$split, 2),\n          currentKey = _parameter$split2[0],\n          currentValue = _parameter$split2[1];\n\n      parametersObject[currentKey] = currentValue;\n    });\n    return parametersObject[key];\n  }\n\n  return null;\n};","map":{"version":3,"sources":["C:/Users/Felipe Paulino/Documents/GitHub/AguaVIva/src/helpers/url.js"],"names":["updateParameter","uri","key","value","hasQueries","includes","hasHash","hash","substr","indexOf","queries","split","parsedQueries","updatedQueries","hasCurrentQuery","forEach","parsedQuery","parsedKey","parsedValue","push","length","join","getParameter","parametersAndHash","parameters","parametersObject","parameter","currentKey","currentValue"],"mappings":"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","sourcesContent":["export const updateParameter = (uri = '/', key, value) => {\r\n  const hasQueries = uri.includes('?');\r\n  const hasHash = uri.includes('#');\r\n  let hash = '';\r\n  if (hasHash) {\r\n    hash = uri.substr(uri.indexOf('#'));\r\n    uri = uri.substr(0, uri.indexOf('#'));\r\n  }\r\n\r\n  let queries = '';\r\n  if (hasQueries) {\r\n    queries = uri.split('?');\r\n    queries = queries[1];\r\n\r\n    uri = uri.substr(0, uri.indexOf('?'));\r\n\r\n    const parsedQueries = queries.split('&');\r\n    const updatedQueries = [];\r\n\r\n    let hasCurrentQuery;\r\n    parsedQueries.forEach((parsedQuery) => {\r\n      const [parsedKey, parsedValue] = parsedQuery.split('=');\r\n      if (parsedKey === key) {\r\n        if (value) {\r\n          hasCurrentQuery = true;\r\n          return updatedQueries.push(`${key}=${value}`);\r\n        }\r\n        return;\r\n      }\r\n      if (parsedValue) {\r\n        updatedQueries.push(`${parsedKey}=${parsedValue}`);\r\n      }\r\n    });\r\n    if (!hasCurrentQuery) {\r\n      if (value) {\r\n        updatedQueries.push(`${key}=${value}`);\r\n      }\r\n    }\r\n    if (updatedQueries.length) {\r\n      queries = '?' + updatedQueries.join('&');\r\n    } else {\r\n      queries = '';\r\n    }\r\n  } else {\r\n    if (value) {\r\n      queries = `?${key}=${value}`;\r\n    }\r\n  }\r\n\r\n  return uri + queries + hash;\r\n};\r\n\r\nexport const getParameter = (uri, key) => {\r\n  const [, parametersAndHash] = uri.split('?');\r\n  if (parametersAndHash) {\r\n    const [parameters] = parametersAndHash.split('#');\r\n    const parametersObject = {};\r\n    parameters.split('&').forEach((parameter) => {\r\n      const [currentKey, currentValue] = parameter.split('=');\r\n      parametersObject[currentKey] = currentValue;\r\n    });\r\n    return parametersObject[key];\r\n  }\r\n  return null;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}