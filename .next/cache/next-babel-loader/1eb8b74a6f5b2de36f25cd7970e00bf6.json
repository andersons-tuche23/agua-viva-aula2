{"ast":null,"code":"export const updateParameter = (uri = \"/\", key, value) => {\n  const hasQueries = uri.includes(\"?\");\n  const hasHash = uri.includes(\"#\");\n  let hash = \"\";\n\n  if (hasHash) {\n    hash = uri.substr(uri.indexOf(\"#\"));\n    uri = uri.substr(0, uri.indexOf(\"#\"));\n  }\n\n  let queries = \"\";\n\n  if (hasQueries) {\n    queries = uri.split(\"?\");\n    queries = queries[1];\n    uri = uri.substr(0, uri.indexOf(\"?\"));\n    const parsedQueries = queries.split(\"&\");\n    const updatedQueries = [];\n    let hasCurrentQuery;\n    parsedQueries.forEach(parsedQuery => {\n      const [parsedKey, parsedValue] = parsedQuery.split(\"=\");\n\n      if (parsedKey === key) {\n        if (value) {\n          hasCurrentQuery = true;\n          return updatedQueries.push(`${key}=${value}`);\n        }\n\n        return;\n      }\n\n      if (parsedValue) {\n        updatedQueries.push(`${parsedKey}=${parsedValue}`);\n      }\n    });\n\n    if (!hasCurrentQuery) {\n      if (value) {\n        updatedQueries.push(`${key}=${value}`);\n      }\n    }\n\n    if (updatedQueries.length) {\n      queries = \"?\" + updatedQueries.join(\"&\");\n    } else {\n      queries = \"\";\n    }\n  } else {\n    if (value) {\n      queries = `?${key}=${value}`;\n    }\n  }\n\n  return uri + queries + hash;\n};\nexport const getParameter = (uri, key) => {\n  const [url, parametersAndHash] = uri.split(\"?\");\n\n  if (parametersAndHash) {\n    const [parameters] = parametersAndHash.split(\"#\");\n    const parametersObject = {};\n    parameters.split(\"&\").forEach(parameter => {\n      const [currentKey, currentValue] = parameter.split(\"=\");\n      parametersObject[currentKey] = currentValue;\n    });\n    return parametersObject[key];\n  }\n\n  return null;\n};","map":{"version":3,"sources":["C:/Users/Felipe Paulino/Documents/GitHub/Web-Motors/src/helpers/update.js"],"names":["updateParameter","uri","key","value","hasQueries","includes","hasHash","hash","substr","indexOf","queries","split","parsedQueries","updatedQueries","hasCurrentQuery","forEach","parsedQuery","parsedKey","parsedValue","push","length","join","getParameter","url","parametersAndHash","parameters","parametersObject","parameter","currentKey","currentValue"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG,CAACC,GAAG,GAAG,GAAP,EAAYC,GAAZ,EAAiBC,KAAjB,KAA2B;AACxD,QAAMC,UAAU,GAAGH,GAAG,CAACI,QAAJ,CAAa,GAAb,CAAnB;AACA,QAAMC,OAAO,GAAGL,GAAG,CAACI,QAAJ,CAAa,GAAb,CAAhB;AACA,MAAIE,IAAI,GAAG,EAAX;;AACA,MAAID,OAAJ,EAAa;AACXC,IAAAA,IAAI,GAAGN,GAAG,CAACO,MAAJ,CAAWP,GAAG,CAACQ,OAAJ,CAAY,GAAZ,CAAX,CAAP;AACAR,IAAAA,GAAG,GAAGA,GAAG,CAACO,MAAJ,CAAW,CAAX,EAAcP,GAAG,CAACQ,OAAJ,CAAY,GAAZ,CAAd,CAAN;AACD;;AAED,MAAIC,OAAO,GAAG,EAAd;;AACA,MAAIN,UAAJ,EAAgB;AACdM,IAAAA,OAAO,GAAGT,GAAG,CAACU,KAAJ,CAAU,GAAV,CAAV;AACAD,IAAAA,OAAO,GAAGA,OAAO,CAAC,CAAD,CAAjB;AAEAT,IAAAA,GAAG,GAAGA,GAAG,CAACO,MAAJ,CAAW,CAAX,EAAcP,GAAG,CAACQ,OAAJ,CAAY,GAAZ,CAAd,CAAN;AAEA,UAAMG,aAAa,GAAGF,OAAO,CAACC,KAAR,CAAc,GAAd,CAAtB;AACA,UAAME,cAAc,GAAG,EAAvB;AAEA,QAAIC,eAAJ;AACAF,IAAAA,aAAa,CAACG,OAAd,CAAuBC,WAAD,IAAiB;AACrC,YAAM,CAACC,SAAD,EAAYC,WAAZ,IAA2BF,WAAW,CAACL,KAAZ,CAAkB,GAAlB,CAAjC;;AACA,UAAIM,SAAS,KAAKf,GAAlB,EAAuB;AACrB,YAAIC,KAAJ,EAAW;AACTW,UAAAA,eAAe,GAAG,IAAlB;AACA,iBAAOD,cAAc,CAACM,IAAf,CAAqB,GAAEjB,GAAI,IAAGC,KAAM,EAApC,CAAP;AACD;;AACD;AACD;;AACD,UAAIe,WAAJ,EAAiB;AACfL,QAAAA,cAAc,CAACM,IAAf,CAAqB,GAAEF,SAAU,IAAGC,WAAY,EAAhD;AACD;AACF,KAZD;;AAaA,QAAI,CAACJ,eAAL,EAAsB;AACpB,UAAIX,KAAJ,EAAW;AACTU,QAAAA,cAAc,CAACM,IAAf,CAAqB,GAAEjB,GAAI,IAAGC,KAAM,EAApC;AACD;AACF;;AACD,QAAIU,cAAc,CAACO,MAAnB,EAA2B;AACzBV,MAAAA,OAAO,GAAG,MAAMG,cAAc,CAACQ,IAAf,CAAoB,GAApB,CAAhB;AACD,KAFD,MAEO;AACLX,MAAAA,OAAO,GAAG,EAAV;AACD;AACF,GAjCD,MAiCO;AACL,QAAIP,KAAJ,EAAW;AACTO,MAAAA,OAAO,GAAI,IAAGR,GAAI,IAAGC,KAAM,EAA3B;AACD;AACF;;AAED,SAAOF,GAAG,GAAGS,OAAN,GAAgBH,IAAvB;AACD,CAlDM;AAoDP,OAAO,MAAMe,YAAY,GAAG,CAACrB,GAAD,EAAMC,GAAN,KAAc;AACxC,QAAM,CAACqB,GAAD,EAAMC,iBAAN,IAA2BvB,GAAG,CAACU,KAAJ,CAAU,GAAV,CAAjC;;AACA,MAAIa,iBAAJ,EAAuB;AACrB,UAAM,CAACC,UAAD,IAAeD,iBAAiB,CAACb,KAAlB,CAAwB,GAAxB,CAArB;AACA,UAAMe,gBAAgB,GAAG,EAAzB;AACAD,IAAAA,UAAU,CAACd,KAAX,CAAiB,GAAjB,EAAsBI,OAAtB,CAA+BY,SAAD,IAAe;AAC3C,YAAM,CAACC,UAAD,EAAaC,YAAb,IAA6BF,SAAS,CAAChB,KAAV,CAAgB,GAAhB,CAAnC;AACAe,MAAAA,gBAAgB,CAACE,UAAD,CAAhB,GAA+BC,YAA/B;AACD,KAHD;AAIA,WAAOH,gBAAgB,CAACxB,GAAD,CAAvB;AACD;;AACD,SAAO,IAAP;AACD,CAZM","sourcesContent":["export const updateParameter = (uri = \"/\", key, value) => {\r\n  const hasQueries = uri.includes(\"?\");\r\n  const hasHash = uri.includes(\"#\");\r\n  let hash = \"\";\r\n  if (hasHash) {\r\n    hash = uri.substr(uri.indexOf(\"#\"));\r\n    uri = uri.substr(0, uri.indexOf(\"#\"));\r\n  }\r\n\r\n  let queries = \"\";\r\n  if (hasQueries) {\r\n    queries = uri.split(\"?\");\r\n    queries = queries[1];\r\n\r\n    uri = uri.substr(0, uri.indexOf(\"?\"));\r\n\r\n    const parsedQueries = queries.split(\"&\");\r\n    const updatedQueries = [];\r\n\r\n    let hasCurrentQuery;\r\n    parsedQueries.forEach((parsedQuery) => {\r\n      const [parsedKey, parsedValue] = parsedQuery.split(\"=\");\r\n      if (parsedKey === key) {\r\n        if (value) {\r\n          hasCurrentQuery = true;\r\n          return updatedQueries.push(`${key}=${value}`);\r\n        }\r\n        return;\r\n      }\r\n      if (parsedValue) {\r\n        updatedQueries.push(`${parsedKey}=${parsedValue}`);\r\n      }\r\n    });\r\n    if (!hasCurrentQuery) {\r\n      if (value) {\r\n        updatedQueries.push(`${key}=${value}`);\r\n      }\r\n    }\r\n    if (updatedQueries.length) {\r\n      queries = \"?\" + updatedQueries.join(\"&\");\r\n    } else {\r\n      queries = \"\";\r\n    }\r\n  } else {\r\n    if (value) {\r\n      queries = `?${key}=${value}`;\r\n    }\r\n  }\r\n\r\n  return uri + queries + hash;\r\n};\r\n\r\nexport const getParameter = (uri, key) => {\r\n  const [url, parametersAndHash] = uri.split(\"?\");\r\n  if (parametersAndHash) {\r\n    const [parameters] = parametersAndHash.split(\"#\");\r\n    const parametersObject = {};\r\n    parameters.split(\"&\").forEach((parameter) => {\r\n      const [currentKey, currentValue] = parameter.split(\"=\");\r\n      parametersObject[currentKey] = currentValue;\r\n    });\r\n    return parametersObject[key];\r\n  }\r\n  return null;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}